//// ****** THIS FILE IS AUTOGENERATED ******
////
////          >>>> DO NOT CHANGE <<<<
////
/// 
///  Filename; C:\Users\LBT\Dropbox\Instrumentacion y control\ProyectoFinal\test\run.py
///  Source class: MiDriver
///  Generation timestamp: 2019-06-25T19:04:26.489535
///  Class code hash: fe638ac00be86e572132174a355b423f3879b3b8
///
/////////////////////////////////////////////////////////////


#include "inodriver_bridge.h"

SerialCommand sCmd;

void ok() {
  Serial.println("OK");
}

void error(const char* msg) {
  Serial.print("ERROR: ");
  Serial.println(msg);
}

void error_i(int errno) {
  Serial.print("ERROR: ");
  Serial.println(errno);
}

void bridge_loop() {
  while (Serial.available() > 0) {
    sCmd.readSerial();
  }
}

void bridge_setup() {
  //// Setup callbacks for SerialCommand commands

  // All commands might return
  //    ERROR: <error message>

  // All set commands return 
  //    OK 
  // if the operation is successfull

  // All parameters are ascii encoded strings
  sCmd.addCommand("INFO?", getInfo); 

  sCmd.setDefaultHandler(unrecognized); 


  // motor
  // <F> float as string 

  // Setter:
  //   MOTOR <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("MOTOR", wrapperSet_MOTOR); 

  // pow_diodo
  // <F> float as string 

  // Getter:
  //   DIODO? 
  // Returns: <F> 
  sCmd.addCommand("DIODO?", wrapperGet_DIODO); 

  // pow_laser
  // <F> float as string 

  // Setter:
  //   LASER <F> 
  // Returns: OK or ERROR    
  sCmd.addCommand("LASER", wrapperSet_LASER); 
}

//// Code 

void getInfo() {
  Serial.print("MiDriver,");
  Serial.println(COMPILE_DATE_TIME);
}

void unrecognized(const char *command) {
  error("Unknown command");
}
//// Auto generated Feat and DictFeat Code
// COMMAND: MOTOR, FEAT: motor

void wrapperSet_MOTOR() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_MOTOR(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



// COMMAND: DIODO, FEAT: pow_diodo

void wrapperGet_DIODO() { 
  Serial.println(get_DIODO()); 
}; 



// COMMAND: LASER, FEAT: pow_laser

void wrapperSet_LASER() {
  char *arg;
  
  arg = sCmd.next();
  if (arg == NULL) {
    error("No value stated");
    return;
  }
  float value = atof(arg);

  int err = set_LASER(value);
  if (err == 0) {
    ok();
  } else {
    error_i(err);
  }
};



